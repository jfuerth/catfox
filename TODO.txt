To do:
- dev organization
  - fix the Makefile: tmpx should run after sprites_nums.s is generated
    but before mobtab is assembled (it wants to point to routines)
  - crunch the sprite file and load/unpack it on startup
  - upgrade to autoboot loader
  - use "; export" comment on labels to export them to the symbol table 
  - better modularity of sprite reverser in game engine
    - goal: depend only on sources - don't include target/sprites_nums.s
	- reverse code could be called with sprite_first/sprite_last args by mobaction init routine?
- Refactor catfox platform detection and platstayact so they share
  cliff detection (or at least make them behave the same--catfox version
  is better tuned for the catfox sprite dimensions)
- P1 controls
  - tinker with accelaration
  - i-frames after damage (tweak that)
- P2 controls
  - use highest sprite priority for crosshairs
  - make fine positioning work (it's too fast right now--needs initial delay)
  - reset screen
- enemies
  - fix platstayact: too shy of left-hand falls (add similar fix as main player logic)
  - getting arrested (resets screen)
  - implement more enemy patterns
- levels
  - optimize charset - some of the symmetrical chars are redundant
- bugs
  - handle load error when trying to reach nonexistent screen
    - just a blank screen if file not found
    - clamp screen coordinates to min/max world coords (so you don't fall forever)
  - make sure screen switching routine still works when taking damage
- screen editing UI with keyboard (and/or joy1?)
  - sprite cursor - 4 corners of region
    - use an alternative moblist for select/paste mode
  - copy and paste rectangular regions
  - extension: saved "brushes" of horizontal or vertical runs?
  - character palette
  - switch modes between design and play
  - save screen
  - warp to screen
  - revert edits of current screen
  - load any screen to current (eg. copy whole screen here)
  - when entering play mode, place player
    - remember last placement
    - prompt to save when leaving screen
  - place mobs
    - choose anim list
    - choose start location
- save and load mob structs (even behaviours in special cases)

Later:
- "irq loader" that can pre-fetch data for nearby screens into ram (don't decompress)
- remember which mobs are dead/disabled when we go back to a screen

Done:
- enable modular game behaviour per screen
  - separate engine code from game specific code
  - load mob tables along with screens
  - redo Makefile to build up from modules in a way that mobtabs
    can access sprite numbers and alist addresses
- track down the source of corruption in one frame of the run sprite (can use a memory write watch)
- make platstayact turn around at edge of screen
- make screen layout design process better
  - use sprite(set) positions from .pe file to position enemies
  - remove testing mobtab (and associated init routines) from source code
  - include a mobtab segment in each screen file
    - figure out how to keep the p1 catfox & p2 crosshairs mobs (make them first?)
- save and load colour ram
- call anim and movement routines during visible raster lines (save vbl for vic updates)
- fine tune platform detection (feels misaligned when falling)
- convert to multi-colour backgrounds
Movement system
- dev organization
  - pexplode should generate everything
    - screens - separate files crunched with colour (and later code)
	- sprites - one file
	  - emit assembler include files with sprite numbers/addresses
	- code - one file, crunched if it helps
	- loader (BASIC for now) - loads screens, sprites, code
  - everything generated goes under target/
    - update the "clean" target to delete just this
  - keep loose files in a place where they can be used with VICE - target/
  - add a Makefile target that runs VICE against the loose files
    - change to correct dir and include all command line args
	- this one would support remote update (does it matter? just restart)
  - add a Makefile target that runs VICE against the .d64 (autoboot)

1. add movement processing pointer to mob struct
2. call movement processing routine with mob ptr in ptr0
3. do joystick and gravity processing in catfox update routine
4. gravity processing should be a subroutine because all non-flying mobs need it
4. implement simple "red koopa" AI for red catfox mob

Bad ideas:

- what if alist goto was always an absolute 16-bit address (not offset)?
  problem: we need to set the alist pointer to the base address,
  so it would have to be address and offset (3 arg bytes).
  -> better to have separate goto and setalist instructions.
- efficiency idea: copy mob struct to zeropage before calling anim and movement routines
  overhead of attribute access using indexed indirect:
        ldy <imm>          2
        lda (<ind>),y 5
      TOTAL                7 cycles
  overhead of ZP attribute access
        lda <zp>      3
   TOTAL                3 cycles
                      = 4 cycles cheaper
  Cost of copy:
   cplp lda <abs>,x   4
        sta <zp>,x    4
        dex           2
        bne cplp      3
   TOTAL                13 * mobstructsz (16) * 2 (to copy back)
                      = 416 cycles
  Break-even is 104 attribute reads/writes during update
  Unrolled copy:
        lda <abs+0>   4
        sta <zp+0>    3
                        7 * mobstructsz (16) * 2 -- not practical because address is in many places
  -> better idea is to use table per attribute, indexed by mob. then can access with
        lda <abs>,x   4  (bonus: abs,y works too)
                      = 3 cycles cheaper

Cheat sheet
- conditional breakpoint based on memory location in VICE:
    bk c30a if @cpu:0008 == $40
